// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: assignment.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Assignment_FindByFormID_FullMethodName  = "/api.Assignment/FindByFormID"
	Assignment_FindByGroupID_FullMethodName = "/api.Assignment/FindByGroupID"
)

// AssignmentClient is the client API for Assignment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentClient interface {
	FindByFormID(ctx context.Context, in *AssignmentFindByFormIDRequest, opts ...grpc.CallOption) (*AssignmentFindByFormIDResponse, error)
	FindByGroupID(ctx context.Context, in *AssignmentFindByGroupIDRequest, opts ...grpc.CallOption) (*AssignmentFindByGroupIDResponse, error)
}

type assignmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentClient(cc grpc.ClientConnInterface) AssignmentClient {
	return &assignmentClient{cc}
}

func (c *assignmentClient) FindByFormID(ctx context.Context, in *AssignmentFindByFormIDRequest, opts ...grpc.CallOption) (*AssignmentFindByFormIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignmentFindByFormIDResponse)
	err := c.cc.Invoke(ctx, Assignment_FindByFormID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClient) FindByGroupID(ctx context.Context, in *AssignmentFindByGroupIDRequest, opts ...grpc.CallOption) (*AssignmentFindByGroupIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignmentFindByGroupIDResponse)
	err := c.cc.Invoke(ctx, Assignment_FindByGroupID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentServer is the server API for Assignment service.
// All implementations must embed UnimplementedAssignmentServer
// for forward compatibility.
type AssignmentServer interface {
	FindByFormID(context.Context, *AssignmentFindByFormIDRequest) (*AssignmentFindByFormIDResponse, error)
	FindByGroupID(context.Context, *AssignmentFindByGroupIDRequest) (*AssignmentFindByGroupIDResponse, error)
	mustEmbedUnimplementedAssignmentServer()
}

// UnimplementedAssignmentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssignmentServer struct{}

func (UnimplementedAssignmentServer) FindByFormID(context.Context, *AssignmentFindByFormIDRequest) (*AssignmentFindByFormIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByFormID not implemented")
}
func (UnimplementedAssignmentServer) FindByGroupID(context.Context, *AssignmentFindByGroupIDRequest) (*AssignmentFindByGroupIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByGroupID not implemented")
}
func (UnimplementedAssignmentServer) mustEmbedUnimplementedAssignmentServer() {}
func (UnimplementedAssignmentServer) testEmbeddedByValue()                    {}

// UnsafeAssignmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentServer will
// result in compilation errors.
type UnsafeAssignmentServer interface {
	mustEmbedUnimplementedAssignmentServer()
}

func RegisterAssignmentServer(s grpc.ServiceRegistrar, srv AssignmentServer) {
	// If the following call pancis, it indicates UnimplementedAssignmentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Assignment_ServiceDesc, srv)
}

func _Assignment_FindByFormID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignmentFindByFormIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).FindByFormID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assignment_FindByFormID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).FindByFormID(ctx, req.(*AssignmentFindByFormIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignment_FindByGroupID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignmentFindByGroupIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).FindByGroupID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assignment_FindByGroupID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).FindByGroupID(ctx, req.(*AssignmentFindByGroupIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assignment_ServiceDesc is the grpc.ServiceDesc for Assignment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assignment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Assignment",
	HandlerType: (*AssignmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByFormID",
			Handler:    _Assignment_FindByFormID_Handler,
		},
		{
			MethodName: "FindByGroupID",
			Handler:    _Assignment_FindByGroupID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assignment.proto",
}
