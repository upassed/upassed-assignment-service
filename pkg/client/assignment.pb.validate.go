// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: assignment.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _assignment_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AssignmentFindByFormIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignmentFindByFormIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignmentFindByFormIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignmentFindByFormIDRequestMultiError, or nil if none found.
func (m *AssignmentFindByFormIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignmentFindByFormIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetFormId()); err != nil {
		err = AssignmentFindByFormIDRequestValidationError{
			field:  "FormId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignmentFindByFormIDRequestMultiError(errors)
	}

	return nil
}

func (m *AssignmentFindByFormIDRequest) _validateUuid(uuid string) error {
	if matched := _assignment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignmentFindByFormIDRequestMultiError is an error wrapping multiple
// validation errors returned by AssignmentFindByFormIDRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignmentFindByFormIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignmentFindByFormIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignmentFindByFormIDRequestMultiError) AllErrors() []error { return m }

// AssignmentFindByFormIDRequestValidationError is the validation error
// returned by AssignmentFindByFormIDRequest.Validate if the designated
// constraints aren't met.
type AssignmentFindByFormIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentFindByFormIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentFindByFormIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentFindByFormIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentFindByFormIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentFindByFormIDRequestValidationError) ErrorName() string {
	return "AssignmentFindByFormIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignmentFindByFormIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignmentFindByFormIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentFindByFormIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentFindByFormIDRequestValidationError{}

// Validate checks the field values on AssignmentFindByFormIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignmentFindByFormIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignmentFindByFormIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignmentFindByFormIDResponseMultiError, or nil if none found.
func (m *AssignmentFindByFormIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignmentFindByFormIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignmentFindByFormIDResponseMultiError(errors)
	}

	return nil
}

// AssignmentFindByFormIDResponseMultiError is an error wrapping multiple
// validation errors returned by AssignmentFindByFormIDResponse.ValidateAll()
// if the designated constraints aren't met.
type AssignmentFindByFormIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignmentFindByFormIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignmentFindByFormIDResponseMultiError) AllErrors() []error { return m }

// AssignmentFindByFormIDResponseValidationError is the validation error
// returned by AssignmentFindByFormIDResponse.Validate if the designated
// constraints aren't met.
type AssignmentFindByFormIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentFindByFormIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentFindByFormIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentFindByFormIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentFindByFormIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentFindByFormIDResponseValidationError) ErrorName() string {
	return "AssignmentFindByFormIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignmentFindByFormIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignmentFindByFormIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentFindByFormIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentFindByFormIDResponseValidationError{}

// Validate checks the field values on AssignmentFindByGroupIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignmentFindByGroupIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignmentFindByGroupIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignmentFindByGroupIDRequestMultiError, or nil if none found.
func (m *AssignmentFindByGroupIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignmentFindByGroupIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		err = AssignmentFindByGroupIDRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssignmentFindByGroupIDRequestMultiError(errors)
	}

	return nil
}

func (m *AssignmentFindByGroupIDRequest) _validateUuid(uuid string) error {
	if matched := _assignment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssignmentFindByGroupIDRequestMultiError is an error wrapping multiple
// validation errors returned by AssignmentFindByGroupIDRequest.ValidateAll()
// if the designated constraints aren't met.
type AssignmentFindByGroupIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignmentFindByGroupIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignmentFindByGroupIDRequestMultiError) AllErrors() []error { return m }

// AssignmentFindByGroupIDRequestValidationError is the validation error
// returned by AssignmentFindByGroupIDRequest.Validate if the designated
// constraints aren't met.
type AssignmentFindByGroupIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentFindByGroupIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentFindByGroupIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentFindByGroupIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentFindByGroupIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentFindByGroupIDRequestValidationError) ErrorName() string {
	return "AssignmentFindByGroupIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignmentFindByGroupIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignmentFindByGroupIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentFindByGroupIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentFindByGroupIDRequestValidationError{}

// Validate checks the field values on AssignmentFindByGroupIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignmentFindByGroupIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignmentFindByGroupIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AssignmentFindByGroupIDResponseMultiError, or nil if none found.
func (m *AssignmentFindByGroupIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignmentFindByGroupIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignmentFindByGroupIDResponseMultiError(errors)
	}

	return nil
}

// AssignmentFindByGroupIDResponseMultiError is an error wrapping multiple
// validation errors returned by AssignmentFindByGroupIDResponse.ValidateAll()
// if the designated constraints aren't met.
type AssignmentFindByGroupIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignmentFindByGroupIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignmentFindByGroupIDResponseMultiError) AllErrors() []error { return m }

// AssignmentFindByGroupIDResponseValidationError is the validation error
// returned by AssignmentFindByGroupIDResponse.Validate if the designated
// constraints aren't met.
type AssignmentFindByGroupIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentFindByGroupIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentFindByGroupIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentFindByGroupIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentFindByGroupIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentFindByGroupIDResponseValidationError) ErrorName() string {
	return "AssignmentFindByGroupIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignmentFindByGroupIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignmentFindByGroupIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentFindByGroupIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentFindByGroupIDResponseValidationError{}
